tdm
(freq.terms <- findFreqTerms(tdm, lowfreq = 20))
m <- as.matrix(tdm)
# calculate the frequency of words and sort it by frequency
word.freq <- sort(rowSums(m), decreasing = T)
word.freq
wordcloud2(word.freq)
tdm
mdf <- data.frame(m)
mdf$words <- rownames(mdf)
colnames(mdf) <- c("freq","word")
mdf<-mdf[,c("word","freq")]
wordcloud2(mdf)
mdf
mdf<-mdf[order(-mdf$freq),]
mdf
wordcloud2(m)
mdf <- data.frame(m)
mdf$words <- rownames(mdf)
mdf$words
colnames(mdf) <- c("freq","word")
mdf
mdf$words
m
word.freq <- sort(rowSums(m), decreasing = T)
mdf <- data.frame(m)
mdf$freq=word.freq
mdf$word=names(word.freq)
wordcloud2(mdf)
wordcloud2(word.freq)
word.freq
word.freq[1]
word.freq[1,1]
wordcloud2(words = names(word.freq), freq = word.freq)
wordcloud2(names(word.freq),word.freq)
mdf$words <- rownames(mdf)
mdf[1]
mdf[1,1]
mdf[10,1]
mdf[10,11]
mdf <- data.frame(names(word.freq),word.freq)
mdf
colnames(mdf) <- c("word","freq")
mdf
wordcloud2(mdf)
m <- as.matrix(tdm)
# calculate the frequency of words and sort it by frequency
word.freq <- sort(rowSums(m), decreasing = T)
mdf <- data.frame(names(word.freq),word.freq)
colnames(mdf) <- c("word","freq")
(freq.terms <- findFreqTerms(tdm, lowfreq = 20))
wordcloud2(mdf)
wordcloud2(mdf,figPath = apple.jpg)
wordcloud2(mdf,figPath = "apple.jpg")
wordcloud2(mdf,figPath = "/apple.jpg")
wordcloud2(mdf,figPath = "./apple.jpg")
wordcloud2(mdf,figPath = "/apple.jpg",color = "skyblue")
wordcloud2(mdf,figPath = "./apple.jpg",color = "skyblue")
wordcloud2(mdf,figPath = "apple.jpg",color = "skyblue")
wordcloud2(mdf,figPath = "apple.jpg",color = "skyblue")
wordcloud2(mdf,figPath = "apple.jpg",color = "skyblue")
wordcloud2(mdf,figPath = "apple.jpg",color = "skyblue")
wordcloud2(mdf,figPath = "apple.jpg",color = "skyblue")
wordcloud2(mdf,figPath = "apple.jpg")
figPath = system.file("apple.jpg",package = "wordcloud2")
wordcloud2(mdf,figPath = figPath,color = "skyblue")
wordcloud2(mdf,figPath = figPath,color = "skyblue")
figPath = system.file("/apple.jpg",package = "wordcloud2")
wordcloud2(mdf,figPath = figPath,color = "skyblue")
figPath = system.file("./apple.jpg",package = "wordcloud2")
wordcloud2(mdf,figPath = figPath,color = "skyblue")
figPath = system.file("C:/Users/Umang Gupta/Desktop/Big Data Project/apple.jpg",package = "wordcloud2")
wordcloud2(mdf,figPath = figPath,color = "skyblue")
wordcloud(r_stats_text_corpus, random.order= F, min.freq = 10, max.words =
150, colors=brewer.pal(8, "Dark2"))
wordcloud2(mdf,figPath = "apple.jpg",color = "skyblue")
wordcloud2(mdf,figPath = "apple.jpg")
wordcloud2(mdf,figPath = "apple.jpg", size = 1.5, color = "skyblue", backgroundColor="black")
wordcloud2(mdf,figPath = "apple.jpg", size = 1.5, color = "skyblue", backgroundColor="white")
wordcloud2(mdf,figPath = "apple.png", size = 1.5, color = "skyblue", backgroundColor="white")
wordcloud2(mdf,figPath = "apple.png", size = 1.5, color = "skyblue", backgroundColor="white")
wordcloud2(mdf,figPath = "apple.png", size = 1.5, color = "skyblue", backgroundColor="white")
wordcloud2(mdf,figPath = "apple.png", size = 1.5, color = "skyblue")
wordcloud2(mdf,figPath = "apple.png", size = 1.5, color = "skyblue")
wordcloud2(mdf,figPath = "apple.png", size = 1.5, color = "skyblue")
wordcloud2(mdf, size = 1.5, color = "skyblue")
wordcloud2(mdf,figPath = "apple.png", size = 1.5, color = "skyblue")
wordcloud2(mdf,figPath = "apple.jpg", size = 1.5, color = "skyblue", backgroundColor="black")
wordcloud2(mdf,figPath = "apple.png", size = 1.5, color = "skyblue", backgroundColor="black")
wordcloud2(mdf,figPath = "apple.png", size = 1.5, color = "skyblue", backgroundColor="black")
wordcloud2(mdf, backgroundColor="black")
wordcloud2(mdf,size=1.5, backgroundColor="black")
wordcloud2(mdf,size=1.5, backgroundColor="black")
wordcloud2(mdf, backgroundColor="black")
letterCloud( mdf, word = "AAPL", color="white", backgroundColor="pink")
wordcloud(r_stats_text_corpus, random.order= F, min.freq = 10, max.words =
150, colors=brewer.pal(8, "Dark2"))
wordcloud2(mdf, backgroundColor="black", shape= "star")
wordcloud2(mdf, backgroundColor="black", shape= "cardioid")
wordcloud2(mdf, backgroundColor="black", shape= "triangle-forward")
wordcloud2(mdf, backgroundColor="black", shape= "diamond")
wordcloud2(mdf, backgroundColor="black")
wordcloud2(mdf,figPath = "M2jeo.jpg", backgroundColor="black")
wordcloud2(mdf,size=3, figPath = "M2jeo.jpg", backgroundColor="black")
wordcloud2(mdf,size=1, figPath = "M2jeo.jpg", backgroundColor="black")
wordcloud2(demoFreq, figPath = "M2jeo.jpg", backgroundColor="black")
wordcloud2(mdf, backgroundColor="black")
hist(apple.scores$score,xlab=" ",main="Sentiment of tweets that mention Apple", border="black",col="skyblue")
stock_prices <- read.csv("HistoricalQuotes.csv")
stock_prices$Date <- as.Date(strptime(stock_prices$date, format= "%d-%m-%y"))
tweet_stock <- left_join(apple.score.merge,
stock_prices, by='Date')
#weekday tweets
weekday_tweet_stock <- tweet_stock
#Create indicator fields to flag tweets as positive,negative or neutral based on sentiment score
weekday_tweet_stock$pos <-
as.numeric(weekday_tweet_stock$score > 0)
weekday_tweet_stock$neg <-
as.numeric(weekday_tweet_stock$score < 0)
weekday_tweet_stock$neu <-
as.numeric(weekday_tweet_stock$score == 0)
#Transform file from one row per tweet to one row per day summarizing the total positive, negative and netural tweets per day
tweet_stock_df <- ddply(weekday_tweet_stock, c('Date',
'high', 'low', 'Daily.Change'), plyr::summarise, pos.count = sum(pos),
neg.count = sum(neg), neu.count = sum(neu))
tweet_stock_df$all.count <- tweet_stock_df$pos.count +
tweet_stock_df$neg.count + tweet_stock_df$neu.count
#calculate the percent of tweets that were negative on each day
tweet_stock_df$percent.neg <-
round((tweet_stock_df$neg.count / tweet_stock_df$all.count) * 100)
#Simple correlation
cor(tweet_stock_df$percent.neg,
tweet_stock_df$Daily.Change, use = "complete")
glm_model <- glm(tweet_stock_df$Daily.Change ~
tweet_stock_df$percent.neg)
summary(glm_model)
#plot of % negative tweets vs daily change in stock price with linear regression line overlaid
# fit a loess line
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.neg,
grid = TRUE,
type = c("p", "r"), col.line = "darkorange", lwd = 3, ylab = "Daily Change in Stock Price",
xlab = "Percent of Negative Tweets", main = "% Negative Tweets vs Daily
Stock Price Change for AAPL")
weekday_tweet_stock <- subset(tweet_stock,
!is.na(Daily.Change))
#Create indicator fields to flag tweets as positive,negative or neutral based on sentiment score
weekday_tweet_stock$pos <-
as.numeric(weekday_tweet_stock$score > 0)
weekday_tweet_stock$neg <-
as.numeric(weekday_tweet_stock$score < 0)
weekday_tweet_stock$neu <-
as.numeric(weekday_tweet_stock$score == 0)
#Transform file from one row per tweet to one row per day summarizing the total positive, negative and netural tweets per day
tweet_stock_df <- ddply(weekday_tweet_stock, c('Date',
'high', 'low', 'Daily.Change'), plyr::summarise, pos.count = sum(pos),
neg.count = sum(neg), neu.count = sum(neu))
tweet_stock_df$all.count <- tweet_stock_df$pos.count +
tweet_stock_df$neg.count + tweet_stock_df$neu.count
#calculate the percent of tweets that were negative on each day
tweet_stock_df$percent.neg <-
round((tweet_stock_df$neg.count / tweet_stock_df$all.count) * 100)
#Simple correlation
cor(tweet_stock_df$percent.neg,
tweet_stock_df$Daily.Change, use = "complete")
glm_model <- glm(tweet_stock_df$Daily.Change ~
tweet_stock_df$percent.neg)
summary(glm_model)
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.neg,
grid = TRUE,
type = c("p", "r"), col.line = "darkorange", lwd = 3, ylab = "Daily Change in Stock Price",
xlab = "Percent of Negative Tweets", main = "% Negative Tweets vs Daily
Stock Price Change for AAPL")
tweet_stock_df$percent.pos <-
round((tweet_stock_df$pos.count / tweet_stock_df$all.count) * 100)
#Simple correlation
cor(tweet_stock_df$percent.pos,
tweet_stock_df$Daily.Change, use = "complete")
glm_model <- glm(tweet_stock_df$Daily.Change ~
tweet_stock_df$percent.pos)
summary(glm_model)
#plot of % positive tweets vs daily change in stock price with linear regression line overlaid
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.pos,
grid = TRUE,
type = c("p", "r"), col.line = "darkorange", lwd = 3,ylab = "Daily Change in Stock Price",
xlab = "Percent of Positive Tweets", main = "% Positive Tweets vs Daily
Stock Price Change for AAPL")
stock_prices <- read.csv("HistoricalQuotes.csv")
#Format date so R knows this is a date field
stock_prices$Date <- as.Date(strptime(stock_prices$date, format= "%d-%m-%y"))
#Left join the sentiment analysis with the stock prices
tweet_stock <- left_join(apple.score.merge,
stock_prices, by='Date')
#weekday tweets
weekday_tweet_stock <- subset(tweet_stock,
!is.na(Daily.Change))
#Create indicator fields to flag tweets as positive,negative or neutral based on sentiment score
weekday_tweet_stock$pos <-
as.numeric(weekday_tweet_stock$score > 0)
weekday_tweet_stock$neg <-
as.numeric(weekday_tweet_stock$score < 0)
weekday_tweet_stock$neu <-
as.numeric(weekday_tweet_stock$score == 0)
#Transform file from one row per tweet to one row per day summarizing the total positive, negative and netural tweets per day
tweet_stock_df <- ddply(weekday_tweet_stock, c('Date',
'high', 'low', 'Daily.Change'), plyr::summarise, pos.count = sum(pos),
neg.count = sum(neg), neu.count = sum(neu))
tweet_stock_df$all.count <- tweet_stock_df$pos.count +
tweet_stock_df$neg.count + tweet_stock_df$neu.count
#calculate the percent of tweets that were negative on each day
tweet_stock_df$percent.neg <-
round((tweet_stock_df$neg.count / tweet_stock_df$all.count) * 100)
#Simple correlation
cor(tweet_stock_df$percent.neg,
tweet_stock_df$Daily.Change, use = "complete")
glm_model <- glm(tweet_stock_df$Daily.Change ~
tweet_stock_df$percent.neg)
summary(glm_model)
#plot of % negative tweets vs daily change in stock price with linear regression line overlaid
# fit a loess line
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.neg,
grid = TRUE,
type = c("p", "r"), col.line = "darkorange", lwd = 3, ylab = "Daily Change in Stock Price",
xlab = "Percent of Negative Tweets", main = "% Negative Tweets vs Daily
Stock Price Change for AAPL")
stock_prices <- read.csv("HistoricalQuotes.csv")
#Format date so R knows this is a date field
stock_prices$Date <- as.Date(strptime(stock_prices$date, format= "%d-%m-%y"))
#Left join the sentiment analysis with the stock prices
tweet_stock <- left_join(apple.score.merge,
stock_prices, by='Date')
#weekday tweets
weekday_tweet_stock <- tweet_stock
weekday_tweet_stock$pos <-
as.numeric(weekday_tweet_stock$score > 0)
weekday_tweet_stock$neg <-
as.numeric(weekday_tweet_stock$score < 0)
weekday_tweet_stock$neu <-
as.numeric(weekday_tweet_stock$score == 0)
#Transform file from one row per tweet to one row per day summarizing the total positive, negative and netural tweets per day
tweet_stock_df <- ddply(weekday_tweet_stock, c('Date',
'high', 'low', 'Daily.Change'), plyr::summarise, pos.count = sum(pos),
neg.count = sum(neg), neu.count = sum(neu))
tweet_stock_df$all.count <- tweet_stock_df$pos.count +
tweet_stock_df$neg.count + tweet_stock_df$neu.count
#calculate the percent of tweets that were negative on each day
tweet_stock_df$percent.neg <-
round((tweet_stock_df$neg.count / tweet_stock_df$all.count) * 100)
#Simple correlation
cor(tweet_stock_df$percent.neg,
tweet_stock_df$Daily.Change, use = "complete")
glm_model <- glm(tweet_stock_df$Daily.Change ~
tweet_stock_df$percent.neg)
summary(glm_model)
#plot of % negative tweets vs daily change in stock price with linear regression line overlaid
# fit a loess line
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.neg,
grid = TRUE,
type = c("p", "r"), col.line = "darkorange", lwd = 3, ylab = "Daily Change in Stock Price",
xlab = "Percent of Negative Tweets", main = "% Negative Tweets vs Daily
Stock Price Change for AAPL")
weekday_tweet_stock <- subset(tweet_stock,
!is.na(Daily.Change))
#Create indicator fields to flag tweets as positive,negative or neutral based on sentiment score
weekday_tweet_stock$pos <-
as.numeric(weekday_tweet_stock$score > 0)
weekday_tweet_stock$neg <-
as.numeric(weekday_tweet_stock$score < 0)
weekday_tweet_stock$neu <-
as.numeric(weekday_tweet_stock$score == 0)
#Transform file from one row per tweet to one row per day summarizing the total positive, negative and netural tweets per day
tweet_stock_df <- ddply(weekday_tweet_stock, c('Date',
'high', 'low', 'Daily.Change'), plyr::summarise, pos.count = sum(pos),
neg.count = sum(neg), neu.count = sum(neu))
tweet_stock_df$all.count <- tweet_stock_df$pos.count +
tweet_stock_df$neg.count + tweet_stock_df$neu.count
#calculate the percent of tweets that were negative on each day
tweet_stock_df$percent.neg <-
round((tweet_stock_df$neg.count / tweet_stock_df$all.count) * 100)
#Simple correlation
cor(tweet_stock_df$percent.neg,
tweet_stock_df$Daily.Change, use = "complete")
glm_model <- glm(tweet_stock_df$Daily.Change ~
tweet_stock_df$percent.neg)
summary(glm_model)
#plot of % negative tweets vs daily change in stock price with linear regression line overlaid
# fit a loess line
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.neg,
grid = TRUE,
type = c("p", "r"), col.line = "darkorange", lwd = 3, ylab = "Daily Change in Stock Price",
xlab = "Percent of Negative Tweets", main = "% Negative Tweets vs Daily
Stock Price Change for AAPL")
tweet_stock_df$percent.pos <-
round((tweet_stock_df$pos.count / tweet_stock_df$all.count) * 100)
#Simple correlation
cor(tweet_stock_df$percent.pos,
tweet_stock_df$Daily.Change, use = "complete")
glm_model <- glm(tweet_stock_df$Daily.Change ~
tweet_stock_df$percent.pos)
summary(glm_model)
#plot of % positive tweets vs daily change in stock price with linear regression line overlaid
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.pos,
grid = TRUE,
type = c("p", "r"), col.line = "darkorange", lwd = 3,ylab = "Daily Change in Stock Price",
xlab = "Percent of Positive Tweets", main = "% Positive Tweets vs Daily
Stock Price Change for AAPL")
stock_prices <- read.csv("HistoricalQuotes.csv")
#Format date so R knows this is a date field
stock_prices$Date <- as.Date(strptime(stock_prices$date, format= "%d-%m-%y"))
#Left join the sentiment analysis with the stock prices
tweet_stock <- left_join(apple.score.merge,
stock_prices, by='Date')
#weekday tweets
weekday_tweet_stock <- tweet_stock
tweet_stock
weekday_tweet_stock$pos <-
as.numeric(weekday_tweet_stock$score > 0)
weekday_tweet_stock$neg <-
as.numeric(weekday_tweet_stock$score < 0)
weekday_tweet_stock$neu <-
as.numeric(weekday_tweet_stock$score == 0)
#Transform file from one row per tweet to one row per day summarizing the total positive, negative and netural tweets per day
tweet_stock_df <- ddply(weekday_tweet_stock, c('Date',
'high', 'low', 'Daily.Change'), plyr::summarise, pos.count = sum(pos),
neg.count = sum(neg), neu.count = sum(neu))
tweet_stock_df$all.count <- tweet_stock_df$pos.count +
tweet_stock_df$neg.count + tweet_stock_df$neu.count
#calculate the percent of tweets that were negative on each day
tweet_stock_df$percent.neg <-
round((tweet_stock_df$neg.count / tweet_stock_df$all.count) * 100)
#Simple correlation
cor(tweet_stock_df$percent.neg,
tweet_stock_df$Daily.Change, use = "complete")
glm_model <- glm(tweet_stock_df$Daily.Change ~
tweet_stock_df$percent.neg)
summary(glm_model)
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.neg,
grid = TRUE,
type = c("p", "r"), col.line = "darkorange", lwd = 3, ylab = "Daily Change in Stock Price",
xlab = "Percent of Negative Tweets", main = "% Negative Tweets vs Daily
Stock Price Change for AAPL")
tweet_stock_df$percent.pos <-
round((tweet_stock_df$pos.count / tweet_stock_df$all.count) * 100)
#Simple correlation
cor(tweet_stock_df$percent.pos,
tweet_stock_df$Daily.Change, use = "complete")
glm_model <- glm(tweet_stock_df$Daily.Change ~
tweet_stock_df$percent.pos)
summary(glm_model)
#plot of % positive tweets vs daily change in stock price with linear regression line overlaid
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.pos,
grid = TRUE,
type = c("p", "r"), col.line = "darkorange", lwd = 3,ylab = "Daily Change in Stock Price",
xlab = "Percent of Positive Tweets", main = "% Positive Tweets vs Daily
Stock Price Change for AAPL")
plot(tweet_stock_df$percent.pos,
tweet_stock_df$Daily.Change, ylab = "Daily Change in Stock Price",
xlab = "Percent of Positive Tweets", main = "% Positive Tweets vs Daily
Stock Price Change for ANTM")
abline(glm_model)
abline(glm_model)
plot(tweet_stock_df$percent.pos,
tweet_stock_df$Daily.Change, ylab = "Daily Change in Stock Price",
xlab = "Percent of Positive Tweets", main = "% Positive Tweets vs Daily
Stock Price Change for ANTM")
loess(glm_model)
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.pos,
grid = TRUE,
type = c("smooth","p", "r"), col.line = "darkorange", lwd = 3,ylab = "Daily Change in Stock Price",
xlab = "Percent of Positive Tweets", main = "% Positive Tweets vs Daily
Stock Price Change for AAPL")
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.pos,
grid = TRUE,
type = c("smooth","p"), col.line = "darkorange", lwd = 3,ylab = "Daily Change in Stock Price",
xlab = "Percent of Positive Tweets", main = "% Positive Tweets vs Daily
Stock Price Change for AAPL")
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.pos,
grid = TRUE,
type = c("smooth"), col.line = "darkorange", lwd = 3,ylab = "Daily Change in Stock Price",
xlab = "Percent of Positive Tweets", main = "% Positive Tweets vs Daily
Stock Price Change for AAPL")
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.pos,
grid = TRUE,
type = c("p"), col.line = "darkorange", lwd = 3,ylab = "Daily Change in Stock Price",
xlab = "Percent of Positive Tweets", main = "% Positive Tweets vs Daily
Stock Price Change for AAPL")
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.pos,
grid = TRUE,
type = "smooth", col.line = "darkorange", lwd = 3,ylab = "Daily Change in Stock Price",
xlab = "Percent of Positive Tweets", main = "% Positive Tweets vs Daily
Stock Price Change for AAPL")
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.pos,
grid = TRUE,
type = c("p", "r"), col.line = "darkorange", lwd = 3,ylab = "Daily Change in Stock Price",
xlab = "Percent of Positive Tweets", main = "% Positive Tweets vs Daily
Stock Price Change for AAPL")
wordcloud2(mdf, backgroundColor="black")
xyplot(tweet_stock_df$Daily.Change ~ tweet_stock_df$percent.pos,
grid = TRUE,
type = c("p", "r"), col.line = "darkorange", lwd = 3,ylab = "Daily Change in Stock Price",
xlab = "Percent of Positive Tweets", main = "% Positive Tweets vs Daily
Stock Price Change for AAPL")
library(quantmod);
library(tseries);
library(ggplot2)
library(timeSeries);
library(forecast);
library(xts);
plot(stock_prices,main="Historical data of Stock Prices")
AAPL = getSymbols('AAPL', from='2012-01-01', to='2018-04-06',auto.assign = FALSE)
AAPL = getSymbols('AAPL', from='2012-01-01', to='2018-04-06',auto.assign = FALSE)
library(quantmod);
library(tseries);
library(ggplot2)
library(timeSeries);
library(forecast);
library(xts);
AAPL = getSymbols('AAPL', from='2012-01-01', to='2018-04-06',auto.assign = FALSE)
View(AAPL)
AAPL
AAPL = na.omit(AAPL)
# Select the relevant close price series
stock_prices = AAPL[,4]
plot(stock_prices,main="Historical data of Stock Prices")
stock = diff(log(stock_prices),lag=1)
stock = stock[!is.na(stock)]
# Plot log returns
plot(stock,type='l', main='log returns plot')
print(adf.test(stock))
breakpoint = floor(nrow(stock)*(2.9/3))
Actual_series = xts(0,as.Date("2014-11-25","%Y-%m-%d"))
# Initialzing a dataframe for the forecasted return series
forecasted_series = data.frame(Forecasted = numeric())
fitauto = auto.arima(stock_prices)
fitauto
res <- residuals(fitauto)
tsdisplay(res)
for (b in breakpoint:(nrow(stock)-1)) {
stock_train = stock[1:b, ]
stock_test = stock[(b+1):nrow(stock), ]
# Summary of the ARIMA model using the determined (p,d,q) parameters
fit = arima(stock_train, order = arimaorder(fitauto),include.mean=FALSE)
summary(fit)
# Forecasting the log returns
arima.forecast = forecast(fit, h = 10,level=99)
summary(arima.forecast)
# plotting the forecast
par(mfrow=c(1,1))
plot(arima.forecast, main = "ARIMA Forecast")
# Creating a series of forecasted returns for the forecasted period
forecasted_series = rbind(forecasted_series,arima.forecast$mean[1])
colnames(forecasted_series) = c("Forecasted")
# Creating a series of actual returns for the forecasted period
Actual_return = stock[(b+1),]
Actual_series = c(Actual_series,xts(Actual_return))
rm(Actual_return)
print(stock_prices[(b+1),])
print(stock_prices[(b+2),])
}
plot(arima.forecast, main = "ARIMA Forecast")
Actual_series = Actual_series[-1]
# Create a time series object of the forecasted series
forecasted_series = xts(forecasted_series,index(Actual_series))
plot(Actual_series,type='l',lwd=2,col='red',main='Actual Returns Vs Forecasted Returns')
lines(forecasted_series,lwd=2,col='blue')
legend('bottom',title="Line types",box.lwd=2, box.col="darkgray", text.font=4, bg='lightgreen',cex=0.8,legend=c("Actual","Forecasted"),lty=c(1,1),lwd=c(2,2),col=c('red','blue'),xpd=TRUE)
comparsion = merge(Actual_series,forecasted_series)
comparsion$Accuracy = sign(comparsion$Actual_series)==sign(comparsion$Forecasted)
print(comparsion)
plot(forecast(fitauto,h=50))
points(1:length(stock_prices),fitted(fitauto),type="l",col="red")
Accuracy_percentage = sum(comparsion$Accuracy == 1)*100/length(comparsion$Accuracy)
print(Accuracy_percentage)
pred_ret_nnet = nnetar(Actual_series,p=arimaorder(fitauto)[1])
plot(forecast(pred_ret_nnet,h=10))
points(1:length(Actual_series),fitted(pred_ret_nnet),type="l",col="red")
stock_prices2 <- window(stock_prices,start='2012-01-01',end='2018-03-20')
stock_prices3 <- window(stock_prices,start='2018-03-20',end='2018-04-06')
print(cpnnet)
accuracy(forecast(nnetar(stock_prices2,p=arimaorder(fitauto)[1]),h=12),stock_prices3)
accuracy(forecast(auto.arima(stock_prices2),h=12),stock_prices3)
forecast(cp_nnet,h=2)
forecast(fitauto,h=2)
fit3 <- ets(model="AAN",Actual_series)
fc2 <- forecast(fit3,h=10)
plot(fc2)
points(1:length(Actual_series),fitted(fit3),type="l",col="red")
plot(stock_prices,main="Historical data of Stock Prices")
print(adf.test(stock))
cp_nnet = nnetar(stock_prices,p=arimaorder(fitauto)[1])
plot(forecast(cp_nnet,h=50))
points(1:length(stock_prices),fitted(cp_nnet),type="l",col="red")
wordcloud2(mdf, backgroundColor="black")
plot(stock_prices,main="Historical data of Stock Prices")
plot(stock_prices,main="Historical data of Stock Prices")
accuracy(forecast(auto.arima(stock_prices2),h=12),stock_prices3)
print(adf.test(stock))
plot(stock,type='l', main='log returns plot')
plot(stock_prices,main="Historical data of Stock Prices")
plot(Actual_series,type='l',lwd=2,col='red',main='Actual Returns Vs Forecasted Returns')
lines(forecasted_series,lwd=2,col='blue')
legend('bottom',title="Line types",box.lwd=2, box.col="darkgray", text.font=4, bg='lightgreen',cex=0.8,legend=c("Actual","Forecasted"),lty=c(1,1),lwd=c(2,2),col=c('red','blue'),xpd=TRUE)
print(cpnnet)
library(quantmod);
library(tseries);
library(ggplot2)
library(timeSeries);
library(forecast);
library(xts);
cp_nnet = nnetar(stock_prices,p=arimaorder(fitauto)[1])
plot(forecast(cp_nnet,h=50))
points(1:length(stock_prices),fitted(cp_nnet),type="l",col="red")
accuracy(forecast(nnetar(stock_prices2,p=arimaorder(fitauto)[1]),h=12),stock_prices3)
